[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NYC 311 Service Requests",
    "section": "",
    "text": "1 Introduction\nThe goal of this project to analyze the 311 service request dataset fetched from NYC OpenData and use various plots to visualize and identify trends to find answers to proposed questions."
  },
  {
    "objectID": "index.html#what-are-311-service-requests",
    "href": "index.html#what-are-311-service-requests",
    "title": "NYC 311 Service Requests",
    "section": "1.1 What are 311 Service Requests ?",
    "text": "1.1 What are 311 Service Requests ?\n311 service requests refer to the non emergency requests raised by the residents for municipal services. These service requests cover a broad range of non-urgent issues and concerns within a community, and they are typically handled by local government agencies.\nSome of the non urgent issues covered under 311 Service Requests -\n\nNoise Complaints\nGraffiti Removal\nAbandoned Vehicles\nReporting stray animals, animal nuisances, or other non-emergency animal-related issues.\nStreet and sidewalk maintenance\n\nThe 311 Service Requests can be raised by dialing the 311 telephone number or any of the other channels like mobile app or online portal"
  },
  {
    "objectID": "index.html#why-311-service-requests-are-important",
    "href": "index.html#why-311-service-requests-are-important",
    "title": "NYC 311 Service Requests",
    "section": "1.2 Why 311 Service Requests are important?",
    "text": "1.2 Why 311 Service Requests are important?\n311 service requests provide valuable insights into the challenges experienced by the city’s residents. Analyzing trends and patterns in these requests enables local governments to comprehend the prevalent issues within the community. These insights, in turn, become instrumental for urban planning, development strategies, and policy formulation aimed at enhancing community welfare.\nThrough this project, our goal is to pinpoint the most common issues faced by residents across various districts in New York City. This information is particularly invaluable for the student community as it offers a nuanced understanding of the quality of life and community welfare in different districts, aiding informed decisions when renting an apartment."
  },
  {
    "objectID": "index.html#questions-we-are-interested-in-studying--",
    "href": "index.html#questions-we-are-interested-in-studying--",
    "title": "NYC 311 Service Requests",
    "section": "1.3 Questions we are interested in studying -",
    "text": "1.3 Questions we are interested in studying -\n\nWhich borough has the most complaints, and the least??\nWhich complaint types are the most numerous, and the least?\nWhat are the locations that most complaints are associated with?\nWhat is the proportion of complaints that were closed by different departments?\nWhat types of complaints get closed the fastest/slowest, by using the mean resolution time to close a request?\nWhat are the trends in service requests over time?"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nSource of the data set - NYC OpenData Website\nDataset link: 311 Service Requests from 2010 to Present\nThe dataset is owned by NYC OpenData and the data was provided by 311 and Department of Information Technology and Telecommunications (DoITT) with the frequency of update set to daily. It offers a comprehensive view of service requests, particularly in terms of location specificity. There are multiple columns in the dataset using which we can help us pinpoint the exact location of the raised request.\nAs we have such a comprehensive dataset which gets updated daily, there are 34.1M rows with 41 columns in it. It covers all the service requests from 2010 till the present date.\nHowever we discovered the following issues with the dataset -\n\nDue to the large dataset size, downloading the dataset as csv becomes difficult (&gt;6GB in size).\nReading such a large dataset in memory also becomes an issue causing RStudio session to crash.\nMultiple columns in the dataset were redundant as they would help us in answering the proposed questions\nAnother issue is mentioned on the NYC OpenData website - Due to pandemic call handling modifications, the ‘Open Data Channel Type’ values may not accurately indicate the channel the Service Request was submitted in for the period starting March 2020.\nMany of the data visualization libraries (eg. VIM, narniar) fail for big datasets and raise errors. As a result, a subset of the dataset is necessary for visualization.\n\nAs a result, instead of reading the entire dataset starting with rows from the year 2010 till the current date, we have used a subset of the data of appropriate size (starting from Sept 2023 till Nov 2023).\nPlan for importing the dataset -\n\nSince the dataset size is big, we cannot directly download the data and then subset for usage. Instead NYC OpenData has a data exploration tool to filter records before exporting the dataset.\nWe used the tool to filter for records starting from Sept 2023 till the current date and also excluded the redundant columns.\nThe dataset was exported as a CSV file and then used for further analysis.\n\nThe dimensions of the subset: 837k rows by 32 columns, 350MB"
  },
  {
    "objectID": "data.html#research-plan",
    "href": "data.html#research-plan",
    "title": "2  Data",
    "section": "2.2 Research Plan",
    "text": "2.2 Research Plan\nAs seen in Section 1.3, these are the questions and the proposed methods we plan to adopt, to answer them. With these issues explored, it should give students an idea of which areas/streets are more problematic (more complaints; complaints of a non-trivial nature such as rat or noise issues; slow response speed by authorities to address them; ) and hence might be good to avoid.\n\nWhich borough has the most complaints, and the least?\n\nWe will plot the Borough features (eg. Borough) with a bar chart, sorted in descending order, to see which boroughs have the most/least complaints over the given time period. As this Borough feature has no missing values, we can use it to plot, without needing any data imputation. Locations with high number of complaints, may be less desirable to live in.\n\nWhich complaint types are the most numerous, and the least?\n\nSimilar to question 1, we can use a bar chart to do this exploration. We can use the feature “Complaint Type” for this visualisation. Certain complaint types are more significant (eg. persistent loud noises, rat issues), while some might be less bothersome, depending on one’s priorities (eg. illegal parking is less of an issue for student tenants, but more annoying for residents with cars).\n\nWhat are the locations that various complaint types are associated with?\n\nWe will make use of address features (eg. Borough, Street Name), and the Complaint Type feature, to plot multiple heatmaps (1 for each address feature). The higher the color intensity, the worse the area in terms of that Complaint Type’s count. Since Borough and Street Name features have very few missing values (0-3%), our plots would be a comprehensive representation of the dataset. Locations with high number of significant complaints, may be less desirable to live in.\n\nProportion of complaints that were handled by different departments?\n\nWe can plot the Agency feature, against the Complaint Type and the Status feature, using a mosaic plot, to see the types of complaints successfully closed/left unclosed by each agency. A low closure count may indicate ineffective responses by the authorities, and may not bode well for people living in that area especially if the complaints are serious in nature (eg. rodent issues).\n\nTypes of complaints that get closed the fastest/slowest, by using the mean resolution time to close a request.\n\nWe can use the Created and Closed Dates features to create a new column “Closing Duration”, aggregate the mean duration for each Complaint Type, and plot the mean Closing Duration against each Complaint Type. If necessary, we may use the median instead of the mean. We can plot this using a box/violin plot.\nBut to do so, we first need to pre-process the date related features, and convert the strings into timestamps, so as to calculate the duration.\nWe can also plot the mean Closing Duration, against the location features, using a chloropeth map, to see which locations close complaints the fastest/slowest.\nThese are also indicators of the effectiveness/responsiveness of the relevant authorities, depending on location and the issue at hand.\n\nWhat are the trends in service requests over time?\n\nWe can plot a time series line chart/ridgeline plot, using the Complaint Types (take the sum eg. for each Borough) plotted against time based features (Created Date, binned into weeks of the year). We could explore adding interactive filters to drill down into each location, to see the trend of different complaint types per location. A persistently high complaint count may be a bad sign for residents in the affected areas, or may indicate ineffective, non-permanent resolutions of issues by the relevant authorities - which all point towards a less-than-pleasant living environment.\n~~~\nFor all the above questions, depending on the results that we observe, we may drill down to lower level features. For example, for certain Boroughs with high number of complaints, we can drill down to Street/Zipcode/Community District levels, to investigate the specific areas that contribute most to the issue."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.3 Missing value analysis",
    "text": "2.3 Missing value analysis\n\n\nCode\nlibrary(readr)\nlibrary(DataExplorer)\n# library(\"googledrive\")\n\n#load data\ndf &lt;- read_csv(\"C:\\\\Users\\\\varun\\\\Downloads\\\\311_Service_Requests_from_20230901_to_20231129.csv\",show_col_types = FALSE)\n# df &lt;- drive_read_string(\"https://drive.google.com/file/d/1UsYevTBsztmkhGO45Fubz1ToqzoeNHcV/view?usp=drive_link\", type = 'csv') #always needs authentication, may not be ideal.\n\n# plot % of missing values for columns \nplot_missing(df, title = \"% of missing values for Features (or columns)\", geom_label_args = list(\"size\" = 2))\n\n\n\n\n\nComments\n\nWe can see that the top few columns eg. Park Borough, Park Facility Name, till Created Date, comprise 0% missing values. That increases to 0.7%-3.7% from Address Type to Street Name. These are still in the Good range (&lt;5%, per documentation). One another observation is that the columns from Police Precincts till Borough Boundaries have the same percentage of missing values.\nFor City to Closed Date, the number of missing values rises to 5%-12%, in the OK range (&lt;5% to 40%). For Landmark, this increases to 40%, in the Bad range (&gt;40% to 80% range).\nFor Facility Type, Vehicle Type, Due Date, almost all rows (&gt;93%) have missing values, which is so high that the package parks them under the Remove range (&gt;80%).**\n\nDocumentation: “link”\n\n\nCode\nplot_intro(df)\n\n\n\n\n\nOnly the last 3 bars pertain to missing data values. The bars represent the following:\n\nBar 1. Discrete Columns: % of columns with discrete data\nBar 2. Continuous Columns: % of columns with continuous data\nBar 3. All Missing Columns: % of columns with everything missing\nBar 4. Complete Rows: % of rows with everything filled\nBar 5. Missing Observations: % of empty cells across whole dataset\n\nDocumentation: Pg11, from “introduce” function\nBar 3: There are no columns that are completely empty. However, this doesn’t mean that all columns are useful, as it still depends on the proportion of empty values for each column (seen in 1st visualisation above. Highly empty columns may not be as useful), and the relevance of the column to the questions we are answering.\nBar 4: There are also no rows that are completely filled. This might not be such a major problem, if the key columns that we’re interested in, are filled.\nBar 5: 12% of the entire dataset’s cells are empty. This is not such a big problem, if the key columns that we’re interested in, are filled."
  },
  {
    "objectID": "results.html#clean-data",
    "href": "results.html#clean-data",
    "title": "3  Results",
    "section": "3.1 Clean data",
    "text": "3.1 Clean data\nSince “Facility Type”, “Vehicle Type”, “Due Date” columns are all having &gt;90% missing values (missing value analysis), we will remove them.\nFrom the dataset description, they refer to…\nFacility Type: If available, this field describes the type of city facility associated to the SR\nVehicle Type: If the incident is a taxi, this field describes the type of TLC vehicle.\nDue Date: Date when responding agency is expected to update the SR. This is based on the Complaint Type and internal Service Level Agreements (SLAs).\n“Landmark” has &gt;40% missing values. But since other address columns (eg. Longitude, Latitude, Incident Address) are proxies of it, we can remove “Landmark”.\nLandmark: If the incident location is identified as a Landmark the name of the landmark will display here\nCommunity Boards (each taking charge of 1 Community District, or CD), together with the City Council Districts, handle the “day-to-day processing of citizen complaints and requests for municipal services”. At the sub-borough level, we will look at how well each CD manages their municipal issues. “link”\nSince we’re only looking at the New York City dataset, the City column is redundant, and can be removed too.\nThere are some rows with Borough and Status values being “Unspecified”. But they take up such a small % of the total number of rows (~0% from missing value analysis), so we will remove these rows too.\n\n\nCode\nservice_data &lt;- service_data[, !(colnames(service_data) %in% c(\"Vehicle Type\", \"Due Date\", \"Facility Type\", \"Landmark\", \"City\"))]\n\n# see count of number of values. in Borough, Status column\ntable(service_data[[\"Borough\"]])\n\n\n\n        BRONX      BROOKLYN     MANHATTAN        QUEENS STATEN ISLAND \n       157918        266927        183142        195532         30344 \n  Unspecified \n         3362 \n\n\nCode\ntable(service_data[[\"Status\"]])\n\n\n\n   Assigned      Closed In Progress        Open     Pending     Started \n       4203      734515       49275       47374         534         885 \nUnspecified \n        439 \n\n\nCode\n# remove rows with Borough / Status = \"Unspecified\"\nservice_data &lt;- service_data[!grepl(\"Unspecified\", service_data$Borough),]\nservice_data &lt;- service_data[!grepl(\"Unspecified\", service_data$Status),]\n\n# convert these columns to lower case, to commonalize similar texts that have different casing\nservice_data &lt;- service_data %&gt;%\n  mutate_at(vars(c(`Street Name`, `Incident Address`, `Complaint Type`)), tolower)"
  },
  {
    "objectID": "results.html#q1-which-borough-has-the-most-complaints-and-the-least",
    "href": "results.html#q1-which-borough-has-the-most-complaints-and-the-least",
    "title": "3  Results",
    "section": "3.2 (Q1) Which borough has the most complaints, and the least?",
    "text": "3.2 (Q1) Which borough has the most complaints, and the least?\n\n\nCode\n# library(ggplot2)\nlibrary(forcats)\n# library(dplyr)\n\n# specify colors for boroughs\ncustom_colors &lt;- c(\"QUEENS\" = \"yellow\", \"MANHATTAN\" = \"blue\", \"BRONX\" = \"brown\", \"STATEN ISLAND\" = \"green\", \"BROOKLYN\" = \"red\")\n\n# plot bar chart\nggplot(service_data %&gt;%\n         group_by(Borough) %&gt;% # to include another dimension (but it tends to be too cluttered), add eg: , `Complaint Type`\n         summarise(Total_Complaints = n()), \n       aes(x = reorder(Borough, -Total_Complaints), y = Total_Complaints/1000, fill = Borough)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Complaints by NYC Borough\",\n       x = \"Borough\",\n       y = \"Number of Complaints (000s)\") +\n  scale_fill_manual(values = custom_colors) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  theme_minimal()\n\n\n\n\n\nComments:\nBrooklyn appears to receive the most 311 complaints, followed by Queens, Manhattan, the Bronx. Staten Island seems to receive the least complaints."
  },
  {
    "objectID": "results.html#q2-which-complaint-types-are-the-most-numerous-and-the-least",
    "href": "results.html#q2-which-complaint-types-are-the-most-numerous-and-the-least",
    "title": "3  Results",
    "section": "3.3 (Q2) Which complaint types are the most numerous, and the least?",
    "text": "3.3 (Q2) Which complaint types are the most numerous, and the least?\n\n\nCode\nggplot(service_data %&gt;%\n         # mutate(`Complaint Type` = tolower(`Complaint Type`)) %&gt;%\n         group_by(`Complaint Type`) %&gt;%\n         summarise(Total_Complaints = n()), \n       aes(x = Total_Complaints/1000, y = reorder(`Complaint Type`, Total_Complaints), fill = `Complaint Type`)) +\n  geom_col(position = position_dodge(width = 20)) +\n  labs(title = \"Total Complaints by Complaint Type\",\n       x = \"Number of Complaints (000s)\",\n       y = \"Complaint Type\") +\n  scale_fill_manual(values = custom_colors) +\n  theme(axis.text.y = element_text(vjust = 0.5)) + # Adjust hjust and vjust as needed\n  theme_minimal()\n\n\n\n\n\nComments:\nOn an aggregate level across all boroughs, the most common complaints range from illegal parking, noise in residential spaces, (presumably, the lack of) hot water, to also blocked driveways. In general, noise/cleanliness/water issues are the most frequent complaints, as seen from the top 10-20 bars.\nTowards the bottom of the bar plot, we see that certain issues amount to fewer cases of complaints. These include highway/snow/oil spill issues. This is understandable, given that they are less “day-to-day” issues.\nTo drill in further, we can facet by boroughs. However, there are clearly too many complaint types. Focusing on just the top 5, for each borough…\n\n\nCode\nlibrary(tidytext)\n\nservice_data_top &lt;- service_data %&gt;%\n  # mutate(`Complaint Type` = tolower(`Complaint Type`)) %&gt;%\n  group_by(Borough, `Complaint Type`) %&gt;%\n  summarise(Total_Complaints = n()) %&gt;%\n  group_by(Borough) %&gt;%\n  top_n(5, wt = Total_Complaints) %&gt;%\n  arrange(Borough, desc(Total_Complaints)) %&gt;%\n  mutate(`Complaint Type` = factor(`Complaint Type`, levels = unique(`Complaint Type`)))\n\n# Get a vector of unique Boroughs ordered by the total complaints\nordered_boroughs &lt;- service_data_top %&gt;%\n  arrange(Borough) %&gt;%\n  group_by(Borough) %&gt;%\n  summarise(total_complaints = sum(Total_Complaints)) %&gt;%\n  arrange(desc(total_complaints)) %&gt;%\n  pull(Borough)\n\n# Use reorder_within to sort bars within each facet\nggplot(service_data_top, aes(x = Total_Complaints, y = reorder_within(`Complaint Type`, Total_Complaints, Borough), fill = `Complaint Type`)) +\n  geom_col() +\n  labs(title = \"Top 5 Complaint Types by Borough\",\n       x = \"Number of Complaints\",\n       y = \"Complaint Type\") +\n  scale_fill_manual(values = custom_colors) +\n  theme_minimal() +\n  facet_wrap(~Borough, scales = \"free_y\", ncol = 1, strip.position = \"bottom\") +\n  theme(axis.text.y = element_text(vjust = 0.5)) +\n  theme_minimal()\n\n\n\n\n\nComments:\nWe see that again, illegal parking, lack of hot water, and residential noise rank amongst the top 5 complaints across all 5 boroughs. This would certainly be something to look out for, for anyone who’s looking to stay in these boroughs. But can we go 1 level lower, to see which streets (in these boroughs) contain many of these complaints?"
  },
  {
    "objectID": "results.html#q3-what-are-the-locations-that-most-complaints-are-associated-with",
    "href": "results.html#q3-what-are-the-locations-that-most-complaints-are-associated-with",
    "title": "3  Results",
    "section": "3.4 (Q3) What are the locations that most complaints are associated with?",
    "text": "3.4 (Q3) What are the locations that most complaints are associated with?\nWe explore locations by their Street Names (eg. Seventh Avenue), not Incident Address (eg. 31 Seventh Avenue, 139 Seventh Avenue), as the latter would have too many unique categories. For the initial plots here, we do not use zip code or longitude/latitude as they are less interpretable (we will plot that on a chloropleth later).\nSince the number of missing rows in Street Names is low, as seen from the missing vales analysis (~3.7% rows missing), we shall omit these missing rows from this section’s analysis.\n\n\nCode\n# remove rows with missing Street Name\nservice_data_temp &lt;- service_data[complete.cases(service_data$`Street Name`), ]\n\n\n\n\nCode\nservice_data_top &lt;- service_data_temp %&gt;%\n  # mutate(`Street Name` = tolower(`Street Name`)) %&gt;%\n  group_by(Borough, `Street Name`) %&gt;%\n  summarise(Total_Complaints = n()) %&gt;%\n  group_by(Borough) %&gt;%\n  top_n(5, wt = Total_Complaints) %&gt;%\n  arrange(Borough, desc(Total_Complaints)) %&gt;%\n  mutate(`Complaint Type` = factor(`Street Name`, levels = unique(`Street Name`)))\n\n# Get a vector of unique Boroughs ordered by the total complaints\nordered_boroughs &lt;- service_data_top %&gt;%\n  arrange(Borough) %&gt;%\n  group_by(Borough) %&gt;%\n  summarise(total_complaints = sum(Total_Complaints)) %&gt;%\n  arrange(desc(total_complaints)) %&gt;%\n  pull(Borough)\n\n# Use reorder_within to sort bars within each facet\nggplot(service_data_top, aes(x = Total_Complaints, y = reorder_within(`Street Name`, Total_Complaints, Borough), fill = `Street Name`)) +\n  geom_col() +\n  labs(title = \"Top 5 Complaint Types by Borough\",\n       x = \"Number of Complaints\",\n       y = \"Complaint Type\") +\n  scale_fill_manual(values = custom_colors) +\n  theme_minimal() +\n  facet_wrap(~Borough, scales = \"free_y\", ncol = 1, strip.position = \"bottom\") +\n  theme(axis.text.y = element_text(vjust = 0.5)) +\n  theme_minimal()\n\n\n\n\n\nComments:\nWe see from here some of the most complained streets in each borough, eg. Ocean Avenue in Brooklyn. But this can also be high, due to the fact that some of them are long, main roads in each Borough (eg. Broadway, Amsterdam Avenue in Manhattan). We can plot a chloropleth to get a better, geographical view of problem areas, which we shall see later."
  },
  {
    "objectID": "results.html#q4-what-is-the-proportion-of-complaints-that-were-handled-by-different-departments",
    "href": "results.html#q4-what-is-the-proportion-of-complaints-that-were-handled-by-different-departments",
    "title": "3  Results",
    "section": "3.5 (Q4) What is the proportion of complaints that were handled by different departments?",
    "text": "3.5 (Q4) What is the proportion of complaints that were handled by different departments?\n\n\nCode\nggplot(service_data %&gt;%\n         group_by(Agency) %&gt;%\n         summarise(Total_Complaints = n()), \n       aes(x = reorder(Agency, -Total_Complaints), y = Total_Complaints/1000, fill = Agency)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Total Complaints by NYC Agencies\",\n       x = \"Agency\",\n       y = \"Number of Complaints (000s)\") +\n  scale_fill_manual(values = custom_colors) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  theme_minimal()\n\n\n\n\n\n\n\nCode\nlibrary(knitr)\n\n# Remove duplicates\nservice_data_agencies &lt;- distinct(select(service_data, Agency, `Agency Name`))\n\n# Display the table\nkable(service_data_agencies, caption = \"Agencies\", format = \"html\")\n\n\n\nAgencies\n\n\nAgency\nAgency Name\n\n\n\n\nNYPD\nNew York City Police Department\n\n\nDOHMH\nDepartment of Health and Mental Hygiene\n\n\nDCWP\nDepartment of Consumer and Worker Protection\n\n\nDPR\nDepartment of Parks and Recreation\n\n\nHPD\nDepartment of Housing Preservation and Development\n\n\nDEP\nDepartment of Environmental Protection\n\n\nDOT\nDepartment of Transportation\n\n\nTLC\nTaxi and Limousine Commission\n\n\nDOB\nDepartment of Buildings\n\n\nDSNY\nDepartment of Sanitation\n\n\nEDC\nEconomic Development Corporation\n\n\nDHS\nDepartment of Homeless Services\n\n\nDOE\nDepartment of Education\n\n\n\n\n\n\n\nWe wanted to also explore how efficient/overworked each Agency is, in managing these complaints. These could provide an indication as to the level of service a resident might expect, when living in the different parts of NYC. We chose to only factor up to 2 levels, because any more levels, and the mosaic plot would become too cluttered to read, given the huge number of categories that we have.\nThe final plot can be seen below:\n\n\nCode\nstatus_order &lt;- c(\"Open\", \"Assigned\", \"Pending\", \"Started\", \"In Progress\", \"Closed\")\n\nservice_data_temp$Status &lt;- factor(service_data_temp$Status, , levels = status_order)\n\ncontingency_table &lt;- table(service_data_temp$Agency, service_data_temp$Status)\n\n# Create a mosaic plot using base R\nmosaicplot(contingency_table, main = \"Distribution of Complaint Status by NYC Agencies\", las=2)\n\n\n\n\n\nComments:\nNote that:\n\nThe data dictionary provided did not explicitly state what each status means, but a sensible inference would be that they are ordinal categories, going from Open, to being Assigned to some agency. It would presumably stay in a Pending status, before work on it gets Started. It’ll remain In Progress, until it gets Closed by the responsible agency.\nLines that split into 3 bands, indicate 0 values for that Status tier.\n\nWe shall focus on the 2 most overworked agencies: NYPD and HPD, with the widest bars.\nWe can thus observe that the NYPD, even though flooded with the greatest volume of complaints, has been able to close almost all of them. This should be reassuring to residents who are concerned about safety and noise related issues, as the NYPD is the main body responsible for them.\nThe HPD (2nd highest workload) however, has many Open issues remaining. This is cold comfort to residents-to-be, who are seeking responsive solutions to their housing infrastructural problems. 1 consolation is that the HPD has also managed to close a large proportion of its complaints.\nWhat about the distribution of complaints handled by Agencies, per Borough?\n\n\nCode\ncontingency_table &lt;- table(service_data_temp$Borough, service_data_temp$Agency)\n\n# Create a mosaic plot using base R\nmosaicplot(contingency_table, main = \"Distribution of Agencies handling complaints, by NYC Boroughs\", las=2)\n\n\n\n\n\nComments:\nPutting this together with the previous plot, we see that once again, NYPD, then HPD, took up the lion’s share of the workload for complaints, across all boroughs. Residents-to-be can feel comforted that issues in their home area that are managed by the NYPD, would mostly be closed.\nQueens however, ought to be slightly concerned, about the (relatively) higher proportion of police complaints that they receive.\nAcross all Boroughs (especially those living in the Bronx), one should also rightfully be concerned at the large amount of housing complaints that they receive in their borough. Queens’ residents-to-be can put their minds at ease, knowing that they get fewer housing complaints."
  },
  {
    "objectID": "results.html#q5-types-of-complaints-that-get-closed-the-fastestslowest-by-using-the-mean-resolution-time-to-close-a-request.",
    "href": "results.html#q5-types-of-complaints-that-get-closed-the-fastestslowest-by-using-the-mean-resolution-time-to-close-a-request.",
    "title": "3  Results",
    "section": "3.6 (Q5) Types of complaints that get closed the fastest/slowest, by using the mean resolution time to close a request.",
    "text": "3.6 (Q5) Types of complaints that get closed the fastest/slowest, by using the mean resolution time to close a request.\nClosing complaints is great. But what about the speed at which they get closed?\n\n\nCode\nservice_data$`Closed Date` &lt;- date(mdy_hms(service_data$`Closed Date`,tz=Sys.timezone()))\nservice_data$`Created Date` &lt;- date(mdy_hms(service_data$`Created Date`,tz=Sys.timezone()))\nservice_data$Closing_Duration &lt;- service_data$`Closed Date` - service_data$`Created Date`\n\n\nComplaints that get resolved the fastest\n\n\nCode\ncomplaint_duration &lt;- service_data %&gt;%\n  group_by(`Complaint Type`) %&gt;%\n  summarise(across(Closing_Duration,mean, na.rm=TRUE))\n\ncomplaint_duration[order(complaint_duration$Closing_Duration, decreasing = FALSE),] %&gt;%\n  slice(1:40) %&gt;%\n  ggplot(aes(x = Closing_Duration, y = fct_rev(\n    fct_reorder(`Complaint Type`, -Closing_Duration, .desc = TRUE)\n  ))) +\n  geom_point() +\n  xlab(\"Closing Duration (Days)\") +\n  ylab(\"Complaint Type\") +\n  ggtitle(\"Mean Time for Complaint Resolution (Days)\")+\n  theme_bw()\n\n\n\n\n\nComments: We see that non-structural issues such as vehicular/sidewalk noise, drug activity, illegal fireworks/parking, generally get resolved the fastest (&lt;1 day). This is to be expected, since the perpetrators can be fairly easily directed away.\nThankfully, many of these are day-to-day issues that can directly affect the wellbeing of residents, and the fact that they get resolved fast brings comfort to anyone who plans to stay in NYC.\nTop 40 Complaints that get resolved the slowest\n\n\nCode\ncomplaint_duration[order(complaint_duration$Closing_Duration, decreasing = TRUE),] %&gt;%\n  slice(1:40) %&gt;%\n  ggplot(aes(x = Closing_Duration, y = fct_rev(\n    fct_reorder(`Complaint Type`, Closing_Duration, .desc = TRUE)\n  ))) +\n  geom_point() +\n  xlab(\"Closing Duration\") +\n  ylab(\"Complaint Type\") +\n  ggtitle(\"Mean Time for Complaint Resolution (Days)\")+\n  theme_bw()\n\n\n\n\n\nComments: Structural issues such as sidewalk/sewer/infrastructure condition, generally get resolved the slowest (&gt;10 days). This is to be expected, since these require more involved efforts.\nHowever, one might be more concerned about sewage/building maintenance/taxi complaints, when planning to stay in NYC. These can impact the living conditions and transportation satisfaction of said city-dweller, and one might want to be aware of the less-easily resolved issues plaguing certain areas in NYC. We will see in the D3 graph, how all the graphs that answer these questions here, come together, to help someone decide where might be problematic areas to live in.\nResolution time for complaint tickets across Boroughs\n\n\nCode\nlibrary(ggridges)\n\nservice_data %&gt;% na.omit(service_data) %&gt;% \nggplot(aes(x = Borough ,y = Closing_Duration)) +\n  geom_boxplot() +\n  ggtitle(\"Boxplot for Ticket Closing Duration for each Borough\")+\n  labs(\n    x = \"Borough\",\n    y = \"Ticket Resolution Duration (Days)\"\n  ) +\n  theme_bw() +\n  coord_flip()\n\n\n\n\n\n\n\nCode\n# ridgeline?\nservice_data %&gt;%\n  ggplot(aes(x = Closing_Duration, y = as.factor(Borough), fill = as.factor(Borough))) +\n  geom_density_ridges() +\n  ggtitle(\"Ridgeline Plot for Ticket Closing Duration for each Borough\") +\n  labs(\n    x = \"Ticket Resolution Duration (Days)\",\n    y = \"Borough\"\n  ) +\n  scale_fill_manual(values = custom_colors) +  # Set specific colors\n  theme_bw()\n\n\n\n\n\nComments:\nFrom the boxplots we can see that the median resolution time across different boroughs is nearly the same (Between 1-2 days). The outliers are mainly due to issues visualized in the previous Cleveland plot.\nRidgeline plots were considered too, instead of the boxplots, and we similarly see a long-tail effect, where most complaints get resolved in &lt;5days, and very few take &gt;10 days to close. But since most of the resolution times are close to 1-2 days, there was not a lot of additional useful information that could be derived from such a distribution.\nResolution time for tickets across Districts\n\n\nCode\nservice_district &lt;- service_data %&gt;%\n  group_by(`City Council Districts`) %&gt;%\n  summarise(mn_cd = mean(Closing_Duration, na.rm = TRUE)) %&gt;%\n  arrange(desc(mn_cd)) %&gt;%\n  rename(value = mn_cd) %&gt;%\n  drop_na(value) %&gt;%\n  mutate(`City Council Districts` = as.character(`City Council Districts`))\n\nnyc_boundaries(geography = \"council\") %&gt;%\n  left_join(service_district,\n            by = c(\"council_dist_id\" = \"City Council Districts\")) %&gt;%\n  ggplot() +\n  geom_sf(aes(fill = value)) +\n  scale_fill_viridis_c(name = \"Mean Resolution Time (Days)\",\n                       option = \"inferno\",\n                       direction = -1) +\n  theme_void() +\n  labs(title = \"How fast is the ticket resolution for each District?\")\n\n\n\n\n\nComments:\nThe above analysis for q5, culminates in this chloropleth map, that shows how long the various districts of NYC’s boroughs take to resolve 311 service requests.\nWe see that the mean complaint resolution time corroborates with the above boxplot/ridgeline plots, with the mean duration hovering below 5 days. However, the darkest colored regions, eg. north Staten Island, west Brooklyn, southwest Queens, southern Manhattan and Bronx, resolve 311 issues the slowest on average. Residents-to-be may want to keep this (and knowledge from Q3, boroughs and their types of high complaint counts, and their respective streets with high complaint counts) in mind, when deciding where to stay."
  },
  {
    "objectID": "results.html#q6-what-are-the-trends-in-service-requests-over-time",
    "href": "results.html#q6-what-are-the-trends-in-service-requests-over-time",
    "title": "3  Results",
    "section": "3.7 (Q6) What are the trends in service requests over time?",
    "text": "3.7 (Q6) What are the trends in service requests over time?\n\n\nCode\nservice_data$week_number &lt;- week(ymd(service_data$`Created Date`))\n\n\nDensity Histogram to understand the distribution of ticket creation over each week\n\n\nCode\nggplot(service_data, aes(x = week_number)) +\n  geom_histogram(\n    aes(y = after_stat(density)),\n    color = \"black\",\n    fill = \"#CC5500\",\n    binwidth = 1,\n    boundary = 0,\n    right = FALSE\n  ) +\n  ggtitle(\"Density Histogram for 311 Tickets created every week (Sept-Nov)\") +\n  theme_bw() +\n  scale_x_continuous(breaks = seq(min(service_data$week_number), max(service_data$week_number), by = 1))\n\n\n\n\n\nLine plot for easy comparison of ticket creation every week across different Boroughs\n\n\nCode\naggregate(\n  service_data$`Complaint Type`,\n  by = list(service_data$Borough, service_data$week_number),\n  FUN = length\n) %&gt;%\n  rename(issue_count = x,\n         week_number = Group.2,\n         Borough = Group.1) %&gt;%\n  ggplot(aes(x = week_number, y = issue_count, color = Borough)) +\n  geom_line() +\n  scale_color_manual(values = custom_colors) +\n  ggtitle(\"Tickets created in different Boroughs for each week (Sept-Nov)\") +\n  labs(x = \"Week Number\", y = \"Created Tickets count\") +\n  theme_grey()\n\n\n\n\n\nComments:\nThere definitely is a pattern as week 40 has the highest ticket creation count across all the Boroughs.\nWeek 35 and Week 48 (omitted, explained below) have the lowest ticket counts. Why? The dataset is from Sept 01 till the Nov29. Since Sept 01 is a Friday, week 35 has only ticket counts for Friday and Saturday instead of the entire week. Similarly, the entire week data for week 48 (only Sunday till Thursday) was not used.\nWe now analyze week 40 to understand the type of issue causing the peak\n\n\nCode\nweek_40_highest &lt;- aggregate(\n  service_data$`Complaint Type`,\n  by = list(service_data$`Complaint Type`,service_data$Borough, service_data$week_number),\n  FUN = length\n) %&gt;% \n  filter(Group.3 == 40) %&gt;% \n  group_by(Group.2) %&gt;% summarise(max_x = max(x),.groups = 'drop') %&gt;% \n  arrange(desc(max_x)) %&gt;% \n  rename(Borough = Group.2, Tickets = max_x)\n\naggregate(\n  service_data$`Complaint Type`,\n  by = list(service_data$`Complaint Type`,service_data$Borough, service_data$week_number),\n  FUN = length\n) %&gt;% \n  filter(Group.3 == 40) %&gt;% \n  arrange(desc(x)) %&gt;% \n  rename(Issue = Group.1,week_number = Group.3,Borough = Group.2, Tickets = x) %&gt;% \n  inner_join(week_40_highest,by=c(\"Borough\" = \"Borough\",\"Tickets\" = \"Tickets\"))\n\n\n            Issue       Borough week_number Tickets\n1 illegal parking      BROOKLYN          40    3629\n2 illegal parking        QUEENS          40    2795\n3 illegal parking     MANHATTAN          40    1454\n4 illegal parking         BRONX          40    1445\n5 illegal parking STATEN ISLAND          40     296\n\n\nComment:\nAlthough there are many issues contributing to the peak on Week 40, Illegal Parking contributes the most. This corroborates with our earlier analysis, where Illegal Parking features as 1 of the most common complaints in NYC.\nA more thorough analysis would have been to explore how the distribution of the various complaint types vary across the months/weeks (perhaps via a parallel plot, or an alluvial diagram). But due to the sheer number of complaint categories, the graphs would have looked too cluttered. Hence, we focus our analysis on just aggregated views of certain weeks of interest (eg. week 40)."
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Please select a Borough:\n\nMANHATTAN QUEENS BRONX BROOKLYN STATEN ISLAND"
  }
]