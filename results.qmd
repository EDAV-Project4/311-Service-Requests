# Results

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

```{r message=FALSE, warning=FALSE}
options(warn = -1)
library(ggplot2)
library(dplyr)
library(lubridate)
library(nycgeo)
library(ggridges)
library(vcd)
library(sf)
library(tidyverse,warn.conflicts = FALSE)
```

```{r}
# service_data = read_csv("C:\\Users\\varun\\Downloads\\311_Service_Requests_from_20230901_to_20231129.csv",show_col_types = FALSE)

service_data = read_csv('I:/My Drive/MSDS/Study/Fall23/EDAV/Homework/final_project/311_Service_Requests_from_20230901_to_20231129.csv', show_col_types = FALSE)

```


## Clean data
Since "Facility Type", "Vehicle Type", "Due Date" columns are all having >90% missing values (missing value analysis), we will remove them. 

From the dataset description, they refer to...

Facility Type: If available, this field describes the type of city facility associated to the SR

Vehicle Type: If the incident is a taxi, this field describes the type of TLC vehicle.

Due Date: Date when responding agency is expected to update the SR. This is based on the Complaint Type and internal Service Level Agreements (SLAs).

"Landmark" has >40% missing values. But since other address columns (eg. Longitude, Latitude, Incident Address) are proxies of it, we can remove "Landmark".

Landmark: If the incident location is identified as a Landmark the name of the landmark will display here

Community Boards (each taking charge of 1 Community District, or CD), handle the "day-to-day processing of citizen complaints and requests for municipal services". At the sub-borough level, we will look at how well each CD manages their municipal issues.
["link"](https://www.nyc.gov/site/queenscb6/about/frequently-asked-questions-faq.page)

Since we're only looking at the New York City dataset, the City column is redundant, and can be removed too.

There are some rows with Borough and Status values being "Unspecified". But they take up such a small % of the total number of rows (~0% from missing value analysis), so we will remove these rows too.

```{r message = FALSE}
service_data <- service_data[, !(colnames(service_data) %in% c("Vehicle Type", "Due Date", "Facility Type", "Landmark", "City"))]

# see count of number of values. in Borough, Status column
table(service_data[["Borough"]])
table(service_data[["Status"]])

# remove rows with Borough / Status = "Unspecified"
service_data <- service_data[!grepl("Unspecified", service_data$Borough),]
service_data <- service_data[!grepl("Unspecified", service_data$Status),]

# convert these columns to lower case, to commonalize similar texts that have different casing
service_data <- service_data %>%
  mutate_at(vars(c(`Street Name`, `Incident Address`, `Complaint Type`)), tolower)

```

## 1.  Which borough has the most complaints, and the least?
```{r message = FALSE}
# library(ggplot2)
library(forcats)
# library(dplyr)

# specify colors for boroughs
custom_colors <- c("QUEENS" = "yellow", "MANHATTAN" = "blue", "BRONX" = "brown", "STATEN ISLAND" = "green", "BROOKLYN" = "red")

# plot bar chart
ggplot(service_data %>%
         group_by(Borough) %>% # to include another dimension (but it tends to be too cluttered), add eg: , `Complaint Type`
         summarise(Total_Complaints = n()), 
       aes(x = reorder(Borough, -Total_Complaints), y = Total_Complaints/1000, fill = Borough)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Complaints by NYC Borough",
       x = "Borough",
       y = "Number of Complaints (000s)") +
  scale_fill_manual(values = custom_colors) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal() # facetgrid: + facet_grid(Borough ~ `Complaint Type`)
```
**Comments:**

Brooklyn appears to receive the most 311 complaints, followed by Queens, Manhattan, the Bronx. Staten Island seems to receive the least complaints.

If we zoom into each Borough, we can see which districts within them receive more complaints.


## 2.  Which complaint types are the most numerous, and the least?
```{r message = FALSE, fig.height=20, fig.width=10}
ggplot(service_data %>%
         # mutate(`Complaint Type` = tolower(`Complaint Type`)) %>%
         group_by(`Complaint Type`) %>%
         summarise(Total_Complaints = n()), 
       aes(x = Total_Complaints/1000, y = reorder(`Complaint Type`, Total_Complaints), fill = `Complaint Type`)) +
  geom_col(position = position_dodge(width = 20)) +
  labs(title = "Total Complaints by Complaint Type",
       x = "Number of Complaints (000s)",
       y = "Complaint Type") +
  scale_fill_manual(values = custom_colors) +
  theme(axis.text.y = element_text(vjust = 0.5))  # Adjust hjust and vjust as needed +
  theme_minimal()
```

**Comments:**

On an aggregate level across all boroughs, the most common complaints range from illegal parking, noise in residential spaces, (presumably, the lack of) hot water, to also blocked driveways. In general, noise/cleanliness/water issues are the most frequent complaints, as seen from the top 10-20 bars. 

Towards the bottom of the bar plot, we see that certain issues amount to fewer cases of complaints. These include highway/snow/oil spill issues. This is understandable, given that they are less "day-to-day" issues.

To drill in further, we can facet by boroughs. However, there are clearly too many complaint types. Focusing on just the top 5, for each borough...

```{r message = FALSE, fig.height=6, fig.width=8}
library(tidytext)

service_data_top <- service_data %>%
  # mutate(`Complaint Type` = tolower(`Complaint Type`)) %>%
  group_by(Borough, `Complaint Type`) %>%
  summarise(Total_Complaints = n()) %>%
  group_by(Borough) %>%
  top_n(5, wt = Total_Complaints) %>%
  arrange(Borough, desc(Total_Complaints)) %>%
  mutate(`Complaint Type` = factor(`Complaint Type`, levels = unique(`Complaint Type`)))

# Get a vector of unique Boroughs ordered by the total complaints
ordered_boroughs <- service_data_top %>%
  arrange(Borough) %>%
  group_by(Borough) %>%
  summarise(total_complaints = sum(Total_Complaints)) %>%
  arrange(desc(total_complaints)) %>%
  pull(Borough)

# Use reorder_within to sort bars within each facet
ggplot(service_data_top, aes(x = Total_Complaints, y = reorder_within(`Complaint Type`, Total_Complaints, Borough), fill = `Complaint Type`)) +
  geom_col() +
  labs(title = "Top 5 Complaint Types by Borough",
       x = "Number of Complaints",
       y = "Complaint Type") +
  scale_fill_manual(values = custom_colors) +
  theme_minimal() +
  facet_wrap(~Borough, scales = "free_y", ncol = 1, strip.position = "bottom") +
  theme(axis.text.y = element_text(vjust = 0.5)) +
  theme_minimal()
```
## 3.  What are the locations that most complaints are associated with?

**Comments:**

We explore locations by their Street Names (eg. Seventh Avenue), not Incident Address (eg. 31 Seventh Avenue, 139 Seventh Avenue), as the latter would have too many unique categories. For the initial plots here, we do not use zip code or longitude/latitude as they are less interpretable (we will plot that on a chloropleth later).

Since the number of missing rows in Street Names is low, as seen from the missing vales analysis (~3.7% rows missing), we shall omit it from this section's analysis.

```{r message = FALSE}

# remove rows with missing Street Name
service_data_temp <- service_data[complete.cases(service_data$`Street Name`), ]
```

```{r message = FALSE}
service_data_top <- service_data_temp %>%
  # mutate(`Street Name` = tolower(`Street Name`)) %>%
  group_by(Borough, `Street Name`) %>%
  summarise(Total_Complaints = n()) %>%
  group_by(Borough) %>%
  top_n(5, wt = Total_Complaints) %>%
  arrange(Borough, desc(Total_Complaints)) %>%
  mutate(`Complaint Type` = factor(`Street Name`, levels = unique(`Street Name`)))

# Get a vector of unique Boroughs ordered by the total complaints
ordered_boroughs <- service_data_top %>%
  arrange(Borough) %>%
  group_by(Borough) %>%
  summarise(total_complaints = sum(Total_Complaints)) %>%
  arrange(desc(total_complaints)) %>%
  pull(Borough)

# Use reorder_within to sort bars within each facet
ggplot(service_data_top, aes(x = Total_Complaints, y = reorder_within(`Street Name`, Total_Complaints, Borough), fill = `Street Name`)) +
  geom_col() +
  labs(title = "Top 5 Complaint Types by Borough",
       x = "Number of Complaints",
       y = "Complaint Type") +
  scale_fill_manual(values = custom_colors) +
  theme_minimal() +
  facet_wrap(~Borough, scales = "free_y", ncol = 1, strip.position = "bottom") +
  theme(axis.text.y = element_text(vjust = 0.5)) +
  theme_minimal()
```
**Comments:**

We see from here some of the most complained streets in each borough, eg. Ocean Avenue in Brooklyn. But this can also be high, due to the fact that some of them are long, main roads in each Borough (eg. Broadway, Amsterdam Avenue in Manhattan). We can plot a chloropleth to get a better, geographical view of problem areas.

```{r}
service_data$`Closed Date` <- date(mdy_hms(service_data$`Closed Date`,tz=Sys.timezone()))
service_data$`Created Date` <- date(mdy_hms(service_data$`Created Date`,tz=Sys.timezone()))
service_data$Closing_Duration <- service_data$`Closed Date` - service_data$`Created Date`
```

## 4.  What is the proportion of complaints that were handled by different departments?
```{r message = FALSE}
ggplot(service_data %>%
         group_by(Agency) %>%
         summarise(Total_Complaints = n()), 
       aes(x = reorder(Agency, -Total_Complaints), y = Total_Complaints/1000, fill = Agency)) +
  geom_bar(stat = "identity") +
  labs(title = "Total Complaints by NYC Agencies",
       x = "Agency",
       y = "Number of Complaints (000s)") +
  scale_fill_manual(values = custom_colors) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme_minimal()
```

**Comments:**

We see here that the number of complaints managed by the NYPD was the most, followed by the HPD, and then the DSNY. DHS, TLC, EDC, DCWP, and DOE seem to handle the least number of complaints. The various departments and their abbreviations are as follows...

```{r message = FALSE}
library(knitr)

# Remove duplicates
service_data_agencies <- distinct(select(service_data, Agency, `Agency Name`))

# Display the table
kable(service_data_agencies, caption = "Agencies", format = "html")
```


## Q5. Types of complaints that get closed the fastest/slowest, by using the mean resolution time to close a request.


**Complaints that get resolved the fastest**
```{r message=FALSE, warning=FALSE}
complaint_duration <- service_data %>%
  group_by(`Complaint Type`) %>%
  summarise(across(Closing_Duration,mean, na.rm=TRUE))

complaint_duration[order(complaint_duration$Closing_Duration, decreasing = FALSE),] %>%
  slice(1:40) %>%
  ggplot(aes(x = Closing_Duration, y = fct_rev(
    fct_reorder(`Complaint Type`, -Closing_Duration, .desc = TRUE)
  ))) +
  geom_point() +
  xlab("Closing Duration (Days)") +
  ylab("Complaint Type") +
  ggtitle("Mean Time for Complaint Resolution (Days)")+
  theme_bw()

```

**Comments:**
We see that non-structural issues such as vehicular/sidewalk noise, drug activity, illegal fireworks/parking, generally get resolved the fastest (<1 day). This is to be expected, since the perpetrators can be fairly easily directed away.

Thankfully, many of these are day-to-day issues that can directly affect the wellbeing of residents, and the fact that they get resolved fast brings comfort to anyone who plans to stay in NYC.

**Top 40 Complaints that get resolved the slowest**
```{r message=FALSE, warning=FALSE}
complaint_duration[order(complaint_duration$Closing_Duration, decreasing = TRUE),] %>%
  slice(1:40) %>%
  ggplot(aes(x = Closing_Duration, y = fct_rev(
    fct_reorder(`Complaint Type`, Closing_Duration, .desc = TRUE)
  ))) +
  geom_point() +
  xlab("Closing Duration") +
  ylab("Complaint Type") +
  ggtitle("Mean Time for Complaint Resolution (Days)")+
  theme_bw()

```

**Comments:**
Structural issues such as sidewalk/sewer/infrastructure condition, generally get resolved the slowest (>10 days). This is to be expected, since these require more involved efforts. 

However, one might be more concerned about sewage/building maintenance/taxi complaints, when planning to stay in NYC. These can impact the living conditions and transportation satisfaction of said city-dweller, and one might want to be aware of the less-easily resolved issues plaguing certain areas in NYC. We will see in the D3 graph, how all the graphs that answer these questions here, come together, to help someone decide where might be problematic areas to live in.


**Resolution time for tickets across Boroughs**
```{r message=FALSE, warning=FALSE}
library(ggridges)

service_data %>% na.omit(service_data) %>% 
ggplot(aes(x = Borough ,y = Closing_Duration)) +
  geom_boxplot() +
  ggtitle("Boxplot for Ticket Closing Duration for each Borough")+
  labs(
    x = "Borough",
    y = "Ticket Resolution Duration (Days)"
  ) +
  theme_bw() +
  coord_flip()
```
```{r message = FALSE, fig.height=10, fig.width=10}
# ridgeline?
service_data %>%
  ggplot(aes(x = Closing_Duration, y = as.factor(Borough), fill = as.factor(Borough))) +
  geom_density_ridges() +
  ggtitle("Ridgeline Plot for Ticket Closing Duration for each Borough") +
  labs(
    x = "Ticket Resolution Duration (Days)",
    y = "Borough"
  ) +
  scale_fill_manual(values = custom_colors) +  # Set specific colors
  theme_bw()
```

**Comments:**

From the boxplots we can see that the median resolution time across different boroughs is nearly the same (Between 1-2 days). The outliers are mainly due to issues visualized in the previous Cleveland plot. A ridgeline plot was considered too, instead of the boxplot, but since most of the resolution times are close to 1-2 days, there was not a lot of useful information that could be derived from such a distribution.


**Resolution time for tickets across Districts**
```{r message=FALSE, warning=FALSE}
service_district <- service_data %>%
  group_by(`City Council Districts`) %>%
  summarise(mn_cd = mean(Closing_Duration, na.rm = TRUE)) %>%
  arrange(desc(mn_cd)) %>%
  rename(value = mn_cd) %>%
  drop_na(value) %>%
  mutate(`City Council Districts` = as.character(`City Council Districts`))

nyc_boundaries(geography = "council") %>%
  left_join(service_district,
            by = c("council_dist_id" = "City Council Districts")) %>%
  ggplot() +
  geom_sf(aes(fill = value)) +
  scale_fill_viridis_c(name = "Mean Resolution Time (Days)",
                       option = "inferno",
                       direction = -1) +
  theme_void() +
  labs(title = "How fast is the ticket resolution for each District?")
```
**Comments:**

The above analysis for q5, culminates in this chloropleth map, that shows how long the various districts of NYC's boroughs take to resolve 311 service requests.


## Q6. What are the trends in service requests over time?

```{r}
service_data$week_number <- week(ymd(service_data$`Created Date`))
```

**Density Histogram to understand the distribution of ticket creation over each week**
```{r message=FALSE, warning=FALSE}
ggplot(service_data, aes(x = week_number)) +
  geom_histogram(
    aes(y = after_stat(density)),
    color = "black",
    fill = "#CC5500",
    binwidth = 1,
    boundary = 0,
    right = FALSE
  ) +
  ggtitle("Density Histogram for 311 Tickets created every week (Sept-Nov)") +
  theme_bw() +
  scale_x_continuous(breaks = seq(min(service_data$week_number), max(service_data$week_number), by = 1))

```


**Line plot for easy comparison of ticket creation every week across different Boroughs**

```{r}

aggregate(
  service_data$`Complaint Type`,
  by = list(service_data$Borough, service_data$week_number),
  FUN = length
) %>%
  rename(issue_count = x,
         week_number = Group.2,
         Borough = Group.1) %>%
  ggplot(aes(x = week_number, y = issue_count, color = Borough)) +
  geom_line() +
  scale_color_manual(values = custom_colors) +
  ggtitle("Tickets created in different Boroughs for each week (Sept-Nov)") +
  labs(x = "Week Number", y = "Created Tickets count") +
  theme_grey()
```

**Comments:**

There definitely is a pattern as week 40 has the highest ticket creation count across all the Boroughs. 

Week 35 and Week 48 (omitted, explained below) have the lowest ticket counts. Why? The dataset is from Sept 01 till the Nov29. Since Sept 01 is a Friday, week 35 has only ticket counts for Friday and Saturday instead of the entire week. Similarly, the entire week data for week 48 (only Sunday till Thursday) was not used.

**We now analyze week 40 to understand the type of issue causing the peak**

```{r message=FALSE, warning=FALSE}
week_40_highest <- aggregate(
  service_data$`Complaint Type`,
  by = list(service_data$`Complaint Type`,service_data$Borough, service_data$week_number),
  FUN = length
) %>% 
  filter(Group.3 == 40) %>% 
  group_by(Group.2) %>% summarise(max_x = max(x),.groups = 'drop') %>% 
  arrange(desc(max_x)) %>% 
  rename(Borough = Group.2, Tickets = max_x)

aggregate(
  service_data$`Complaint Type`,
  by = list(service_data$`Complaint Type`,service_data$Borough, service_data$week_number),
  FUN = length
) %>% 
  filter(Group.3 == 40) %>% 
  arrange(desc(x)) %>% 
  rename(Issue = Group.1,week_number = Group.3,Borough = Group.2, Tickets = x) %>% 
  inner_join(week_40_highest,by=c("Borough" = "Borough","Tickets" = "Tickets"))
```

**Comment**:

Although there are many issues contributing to the peak on Week 40, Illegal Parking contributes the most. This corroborates with our earlier analysis, where Illegal Parking features as 1 of the most common complaints in NYC.

A more thorough analysis would have been to explore how the distribution of the various complaint types vary across the months (perhaps via a parallel plot, or an alluvial diagram). But due to the sheer number of complaint categories, the graphs would have looked too cluttered. Hence, we focus our analysis on just certain weeks of interest (eg. week 40).
